/* CÓDIGOS DE TESTE */
INSERT INTO MATERIAL_STANDARDS(ID_MATERIAL, NAME, MAXIMUM_COST) VALUES (1, 'Lápis', 1.0);
INSERT INTO SUPPLIER(ID_SUPPLIER, NAME) VALUES (1, 'Kalunga');
INSERT INTO PURCHASED(ID_PURCHASED, ID_MATERIAL, ID_SUPPLIER, UNIT_COST, QUANTITY, PURCHASE_DATE) VALUES (1, 1, 1, 1.0, 1, '2018-06-18');

SELECT * FROM MATERIAL_STANDARDS;
SELECT * FROM SUPPLIER;
SELECT * FROM PURCHASED;

DELETE * FROM MATERIAL_STANDARDS;
DELETE * FROM SUPPLIER;
DELETE * FROM PURCHASED;

/* RELATÓRIO DE MATERIAL */
SELECT P.ID_MATERIAL, M.NAME AS MATERIAL, FORMAT (SUM(P.QUANTITY), 0) AS QT_TOTAL, FORMAT (AVG(P.UNIT_COST), 2) AS AVG_UNIT_COST 
FROM MATERIAL_STANDARDS M 
   INNER JOIN PURCHASED P ON M.ID_MATERIAL = P.ID_MATERIAL
   INNER JOIN SUPPLIER S ON P.ID_SUPPLIER = S.ID_SUPPLIER
GROUP BY P.ID_MATERIAL ORDER BY M.NAME ASC;

/* WHERE MATERIAL */
SELECT P.ID_MATERIAL, P.ID_SUPPLIER, M.NAME AS MATERIAL, S.NAME AS SUPPLIER, FORMAT (SUM(P.QUANTITY), 0) AS QT_TOTAL, FORMAT (AVG(P.UNIT_COST), 2) AS AVG_UNIT_COST 
FROM MATERIAL_STANDARDS M 
   INNER JOIN PURCHASED P ON M.ID_MATERIAL = P.ID_MATERIAL
   INNER JOIN SUPPLIER S ON P.ID_SUPPLIER = S.ID_SUPPLIER
   AND M.NAME LIKE UPPER("%Canet%")
GROUP BY P.ID_MATERIAL ORDER BY M.NAME ASC;

/* WHERE SUPPLIER */
SELECT P.ID_MATERIAL, P.ID_SUPPLIER, M.NAME AS MATERIAL, S.NAME AS SUPPLIER, FORMAT (SUM(P.QUANTITY), 0) AS QT_TOTAL, FORMAT (AVG(P.UNIT_COST), 2) AS AVG_UNIT_COST 
FROM MATERIAL_STANDARDS M 
   INNER JOIN PURCHASED P ON M.ID_MATERIAL = P.ID_MATERIAL
   INNER JOIN SUPPLIER S ON P.ID_SUPPLIER = S.ID_SUPPLIER
   AND S.NAME LIKE UPPER("%orros %")
GROUP BY P.ID_MATERIAL ORDER BY M.NAME ASC;

/* WHERE DT_MIN */
SELECT P.ID_MATERIAL, P.ID_SUPPLIER, M.NAME AS MATERIAL, S.NAME AS SUPPLIER, FORMAT (SUM(P.QUANTITY), 0) AS QT_TOTAL, FORMAT (AVG(P.UNIT_COST), 2) AS AVG_UNIT_COST 
FROM MATERIAL_STANDARDS M 
   INNER JOIN PURCHASED P ON M.ID_MATERIAL = P.ID_MATERIAL
   INNER JOIN SUPPLIER S ON P.ID_SUPPLIER = S.ID_SUPPLIER
   WHERE P.PURCHASE_DATE >= "2018-06-15 00:00:00" /* PODE SER DT_MAX com <= e hora em 23:59:59 */
GROUP BY P.ID_MATERIAL ORDER BY M.NAME ASC;

/* WHERE DT_MIN AND DT_MAX */
SELECT P.ID_MATERIAL, M.NAME AS MATERIAL, FORMAT (SUM(P.QUANTITY), 0) AS QT_TOTAL, FORMAT (AVG(P.UNIT_COST), 2) AS AVG_UNIT_COST 
FROM MATERIAL_STANDARDS M 
   INNER JOIN PURCHASED P ON M.ID_MATERIAL = P.ID_MATERIAL
   INNER JOIN SUPPLIER S ON P.ID_SUPPLIER = S.ID_SUPPLIER
   WHERE P.PURCHASE_DATE BETWEEN "2018-06-15 00:00:00" AND "2018-06-15 23:59:59"
GROUP BY P.ID_MATERIAL ORDER BY M.NAME ASC;

/* WHERE DT_MIN AND DT_MAX AND SUPPLIER */
SELECT P.ID_MATERIAL, P.ID_SUPPLIER, M.NAME AS MATERIAL, S.NAME AS SUPPLIER, FORMAT (SUM(P.QUANTITY), 0) AS QT_TOTAL, FORMAT (AVG(P.UNIT_COST), 2) AS AVG_UNIT_COST 
FROM MATERIAL_STANDARDS M 
   INNER JOIN PURCHASED P ON M.ID_MATERIAL = P.ID_MATERIAL
   INNER JOIN SUPPLIER S ON P.ID_SUPPLIER = S.ID_SUPPLIER
   WHERE P.PURCHASE_DATE BETWEEN "2018-06-15 00:00:00" AND "2018-06-15 23:59:59"
     AND S.NAME LIKE UPPER("%orros %")
GROUP BY P.ID_MATERIAL ORDER BY M.NAME ASC;


/* WHERE DT_MIN AND DT_MAX AND SUPPLIER AND MIN AVG_UNIT_COST */

/* Para fazer essa query é necessário primeiro descobrir a média do custo unitário para todos os materiais e depois filtrar quais deles tem a média do custo unitário entre os valores informados, para isso vamos usar a cláusula HAVING. */

SELECT P.ID_MATERIAL, P.ID_SUPPLIER, M.NAME AS MATERIAL, S.NAME AS SUPPLIER, FORMAT (SUM(P.QUANTITY), 0) AS QT_TOTAL, FORMAT (AVG(P.UNIT_COST), 2) AS AVG_UNIT_COST 
FROM MATERIAL_STANDARDS M 
   INNER JOIN PURCHASED P ON M.ID_MATERIAL = P.ID_MATERIAL
   INNER JOIN SUPPLIER S ON P.ID_SUPPLIER = S.ID_SUPPLIER
   WHERE P.PURCHASE_DATE BETWEEN "2018-06-15 00:00:00" AND "2018-06-15 23:59:59"
     AND S.NAME LIKE UPPER("%orros %")
GROUP BY P.ID_MATERIAL
HAVING AVG_UNIT_COST <= 0.07 /* Também ode ser >= */
ORDER BY M.NAME ASC;

/* WHERE DT_MIN AND DT_MAX AND SUPPLIER AND MIN AVG_UNIT_COST AND MAX AVG_UNIT_COST AND MATERIAL */
SELECT P.ID_MATERIAL, P.ID_SUPPLIER, M.NAME AS MATERIAL, S.NAME AS SUPPLIER, FORMAT (SUM(P.QUANTITY), 0) AS QT_TOTAL, FORMAT (AVG(P.UNIT_COST), 2) AS AVG_UNIT_COST 
FROM MATERIAL_STANDARDS M 
   INNER JOIN PURCHASED P ON M.ID_MATERIAL = P.ID_MATERIAL
   INNER JOIN SUPPLIER S ON P.ID_SUPPLIER = S.ID_SUPPLIER
   WHERE P.PURCHASE_DATE BETWEEN "2018-06-15 00:00:00" AND "2018-06-15 23:59:59"
     AND S.NAME LIKE UPPER("%orros %")
     AND M.NAME LIKE UPPER("%CLad%")
GROUP BY P.ID_MATERIAL
HAVING AVG_UNIT_COST BETWEEN 0.03 AND 0.07
ORDER BY M.NAME ASC;